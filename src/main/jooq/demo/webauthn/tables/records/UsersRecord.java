/*
 * This file is generated by jOOQ.
 */
package demo.webauthn.tables.records;


import demo.webauthn.tables.Users;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsersRecord extends UpdatableRecordImpl<UsersRecord> implements Record4<String, String, LocalDateTime, String> {

    private static final long serialVersionUID = 744949382;

    /**
     * Setter for <code>webauthn_demo.users.id</code>.
     */
    public void setId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>webauthn_demo.users.id</code>.
     */
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>webauthn_demo.users.username</code>.
     */
    public void setUsername(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>webauthn_demo.users.username</code>.
     */
    public String getUsername() {
        return (String) get(1);
    }

    /**
     * Setter for <code>webauthn_demo.users.create_time</code>.
     */
    public void setCreateTime(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>webauthn_demo.users.create_time</code>.
     */
    public LocalDateTime getCreateTime() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>webauthn_demo.users.password_bcrypt</code>.
     */
    public void setPasswordBcrypt(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>webauthn_demo.users.password_bcrypt</code>.
     */
    public String getPasswordBcrypt() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, LocalDateTime, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<String, String, LocalDateTime, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Users.USERS.ID;
    }

    @Override
    public Field<String> field2() {
        return Users.USERS.USERNAME;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return Users.USERS.CREATE_TIME;
    }

    @Override
    public Field<String> field4() {
        return Users.USERS.PASSWORD_BCRYPT;
    }

    @Override
    public String component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getUsername();
    }

    @Override
    public LocalDateTime component3() {
        return getCreateTime();
    }

    @Override
    public String component4() {
        return getPasswordBcrypt();
    }

    @Override
    public String value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getUsername();
    }

    @Override
    public LocalDateTime value3() {
        return getCreateTime();
    }

    @Override
    public String value4() {
        return getPasswordBcrypt();
    }

    @Override
    public UsersRecord value1(String value) {
        setId(value);
        return this;
    }

    @Override
    public UsersRecord value2(String value) {
        setUsername(value);
        return this;
    }

    @Override
    public UsersRecord value3(LocalDateTime value) {
        setCreateTime(value);
        return this;
    }

    @Override
    public UsersRecord value4(String value) {
        setPasswordBcrypt(value);
        return this;
    }

    @Override
    public UsersRecord values(String value1, String value2, LocalDateTime value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UsersRecord
     */
    public UsersRecord() {
        super(Users.USERS);
    }

    /**
     * Create a detached, initialised UsersRecord
     */
    public UsersRecord(String id, String username, LocalDateTime createTime, String passwordBcrypt) {
        super(Users.USERS);

        set(0, id);
        set(1, username);
        set(2, createTime);
        set(3, passwordBcrypt);
    }
}
